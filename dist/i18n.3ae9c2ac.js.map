{"mappings":"ACCA,IAAI,OAAS,IAAI,OAAO,YAAa,CACjC,WAAY,CACR,OAAQ,sBACR,OAAQ,qBACZ,EACA,WAAY,CACR,GAAI,oBACR,CACJ,GAEA,IAAM,UAAY,KAEV,AADU,OAAO,UAAU,CACnB,KACR,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,GAAG,OAAO,CAAC,CAAC,EAAG,KAClC,UAAU,CACN,eAAgB,eAChB,oBAAqB,YACrB,OAAQ,CAAC,GAAG,EAAE,EAAA,CAAG,CACjB,YAAa,CAAC,GAAG,EAAE,EAAI,EAAA,CAAG,CAC1B,MAAO,MACP,MAAO,SACX,EACJ,EAER,EAEA,YAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAG1C,AAFiB,SAAS,gBAAgB,CAAC,YAElC,OAAO,CAAC,AAAA,IACb,IAAM,EAAQ,CAAC,EAAQ,YAAY,CAAC,eAAiB,EAC/C,EAAW,CAAC,EAAQ,YAAY,CAAC,kBAAoB,IAGrD,EAAW,EAAQ,WAAW,CAAC,KAAK,CAAC,OAC3C,GAAI,CAAC,EAAU,OAEf,IAAM,EAAM,CAAC,CAAQ,CAAC,EAAE,CAClB,EAAe,EAAQ,WAAW,CAElC,EAAc,KAAK,KAAK,CAAE,EAAW,IADzB,IAEZ,EAAY,AAAC,CAAA,EAAM,CAAA,EAAS,EAE9B,EAAU,EACV,EAAQ,EAEN,EAAgB,KAGlB,GAFA,IACA,GAAW,EACP,EAAQ,EAAa,CACrB,IAAM,EAAgB,KAAK,KAAK,CAAC,EACjC,CAAA,EAAQ,WAAW,CAAG,EAAa,OAAO,CAAC,MAAO,GAClD,sBAAsB,EAC1B,MACI,EAAQ,WAAW,CAAG,EAAa,OAAO,CAAC,MAAO,EAE1D,CAEA,CAAA,EAAQ,WAAW,CAAG,EAAa,OAAO,CAAC,MAAO,GAClD,GACJ,EACJ,GAGA,SAAS,gBAAgB,CAAC,mBAAoB,KAE1C,GAAI,AADU,OAAO,UAAU,CACnB,IAAK,CACb,IAAM,EAAmB,SAAS,gBAAgB,CAAC,iBAE7C,EAAW,IAAI,qBAAqB,CAAC,EAAS,KAChD,EAAQ,OAAO,CAAC,AAAA,IACZ,GAAI,EAAM,cAAc,CAAE,CACtB,IAAM,EAAK,EAAM,MAAM,CACjB,EAAQ,EAAG,OAAO,CAAC,KAAK,EAAI,KAC5B,EAAW,EAAG,OAAO,CAAC,QAAQ,EAAI,MAExC,CAAA,EAAG,KAAK,CAAC,cAAc,CAAG,EAC1B,EAAG,KAAK,CAAC,iBAAiB,CAAG,EAE7B,EAAG,SAAS,CAAC,GAAG,CAAC,WACjB,EAAS,SAAS,CAAC,EACvB,CACJ,EACJ,EAAG,CACC,UAAW,EACf,GAEA,EAAiB,OAAO,CAAC,AAAA,IACrB,EAAS,OAAO,CAAC,EACrB,EACJ,CACJ","sources":["<anon>","src/script.js"],"sourcesContent":["var swiper = new Swiper(\".mySwiper\", {\n    navigation: {\n        nextEl: \".swiper-button-next\",\n        prevEl: \".swiper-button-prev\"\n    },\n    pagination: {\n        el: \".swiper-pagination\"\n    }\n});\nconst setArrows = ()=>{\n    const width = window.innerWidth;\n    if (width < 768) Array.from({\n        length: 4\n    }).forEach((_, i)=>{\n        arrowLine({\n            sourcePosition: 'bottomCenter',\n            destinationPosition: 'topCenter',\n            source: `#id${i}`,\n            destination: `#id${i + 1}`,\n            style: 'dot',\n            color: '#bf5757'\n        });\n    });\n};\nsetArrows();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const counters = document.querySelectorAll('.counter');\n    counters.forEach((counter)=>{\n        const start = +counter.getAttribute('data-start') || 0;\n        const duration = +counter.getAttribute('data-duration') || 2000;\n        // Ищем число в тексте (берем первое найденное)\n        const endMatch = counter.textContent.match(/\\d+/);\n        if (!endMatch) return; // если число не нашли - пропускаем элемент\n        const end = +endMatch[0];\n        const originalText = counter.textContent;\n        const frameRate = 60;\n        const totalFrames = Math.round(duration / 1000 * frameRate);\n        const increment = (end - start) / totalFrames;\n        let current = start;\n        let frame = 0;\n        const updateCounter = ()=>{\n            frame++;\n            current += increment;\n            if (frame < totalFrames) {\n                const displayNumber = Math.floor(current);\n                counter.textContent = originalText.replace(/\\d+/, displayNumber);\n                requestAnimationFrame(updateCounter);\n            } else counter.textContent = originalText.replace(/\\d+/, end);\n        };\n        counter.textContent = originalText.replace(/\\d+/, start); // сначала показываем старт\n        updateCounter();\n    });\n});\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const width = window.innerWidth;\n    if (width > 768) {\n        const animatedElements = document.querySelectorAll('.animate-once');\n        const observer = new IntersectionObserver((entries, observer)=>{\n            entries.forEach((entry)=>{\n                if (entry.isIntersecting) {\n                    const el = entry.target;\n                    const delay = el.dataset.delay || '0s';\n                    const duration = el.dataset.duration || '0.6s';\n                    el.style.animationDelay = delay;\n                    el.style.animationDuration = duration;\n                    el.classList.add('visible');\n                    observer.unobserve(el); // Анимация только один раз\n                }\n            });\n        }, {\n            threshold: 0.1 // элемент стал виден хотя бы на 10%\n        });\n        animatedElements.forEach((el)=>{\n            observer.observe(el);\n        });\n    }\n});\n\n//# sourceMappingURL=i18n.3ae9c2ac.js.map\n","\r\nvar swiper = new Swiper(\".mySwiper\", {\r\n    navigation: {\r\n        nextEl: \".swiper-button-next\",\r\n        prevEl: \".swiper-button-prev\",\r\n    },\r\n    pagination: {\r\n        el: \".swiper-pagination\",\r\n    },\r\n});\r\n\r\nconst setArrows = () => {\r\n    const width = window.innerWidth;\r\n    if (width < 768) {\r\n        Array.from({ length: 4 }).forEach((_, i) => {\r\n            arrowLine({\r\n                sourcePosition: 'bottomCenter',\r\n                destinationPosition: 'topCenter',\r\n                source: `#id${i}`,\r\n                destination: `#id${i + 1}`,\r\n                style: 'dot',\r\n                color: '#bf5757'\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nsetArrows();\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const counters = document.querySelectorAll('.counter');\r\n\r\n    counters.forEach(counter => {\r\n        const start = +counter.getAttribute('data-start') || 0;\r\n        const duration = +counter.getAttribute('data-duration') || 2000;\r\n\r\n        // Ищем число в тексте (берем первое найденное)\r\n        const endMatch = counter.textContent.match(/\\d+/);\r\n        if (!endMatch) return; // если число не нашли - пропускаем элемент\r\n\r\n        const end = +endMatch[0];\r\n        const originalText = counter.textContent;\r\n        const frameRate = 60;\r\n        const totalFrames = Math.round((duration / 1000) * frameRate);\r\n        const increment = (end - start) / totalFrames;\r\n\r\n        let current = start;\r\n        let frame = 0;\r\n\r\n        const updateCounter = () => {\r\n            frame++;\r\n            current += increment;\r\n            if (frame < totalFrames) {\r\n                const displayNumber = Math.floor(current);\r\n                counter.textContent = originalText.replace(/\\d+/, displayNumber);\r\n                requestAnimationFrame(updateCounter);\r\n            } else {\r\n                counter.textContent = originalText.replace(/\\d+/, end);\r\n            }\r\n        };\r\n\r\n        counter.textContent = originalText.replace(/\\d+/, start); // сначала показываем старт\r\n        updateCounter();\r\n    });\r\n});\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const width = window.innerWidth;\r\n    if (width > 768) {\r\n        const animatedElements = document.querySelectorAll('.animate-once');\r\n\r\n        const observer = new IntersectionObserver((entries, observer) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    const el = entry.target;\r\n                    const delay = el.dataset.delay || '0s';\r\n                    const duration = el.dataset.duration || '0.6s';\r\n\r\n                    el.style.animationDelay = delay;\r\n                    el.style.animationDuration = duration;\r\n\r\n                    el.classList.add('visible');\r\n                    observer.unobserve(el); // Анимация только один раз\r\n                }\r\n            });\r\n        }, {\r\n            threshold: 0.1 // элемент стал виден хотя бы на 10%\r\n        });\r\n\r\n        animatedElements.forEach(el => {\r\n            observer.observe(el);\r\n        });\r\n    }\r\n});\r\n\r\n"],"names":["swiper","Swiper","navigation","nextEl","prevEl","pagination","el","setArrows","width","window","innerWidth","Array","from","length","forEach","_","i","arrowLine","sourcePosition","destinationPosition","source","destination","style","color","document","addEventListener","counters","querySelectorAll","counter","start","getAttribute","duration","endMatch","textContent","match","end","originalText","totalFrames","Math","round","increment","current","frame","updateCounter","displayNumber","floor","replace","requestAnimationFrame","animatedElements","observer","IntersectionObserver","entries","entry","isIntersecting","target","delay","dataset","animationDelay","animationDuration","classList","add","unobserve","threshold","observe"],"version":3,"file":"i18n.3ae9c2ac.js.map"}